{"version":3,"file":"script.js","mappings":";;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,0CAA0C;AAClF;AACA;AACA,wCAAwC,0CAA0C;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD","sources":["webpack://visual-scripting-sandbox/./src/index.ts"],"sourcesContent":["\"use strict\";\r\nconst debugElement = document.getElementById('debug');\r\nconst canvas = document.getElementById('main-canvas');\r\nconst context = canvas.getContext('2d');\r\nlet bounds = canvas.getBoundingClientRect();\r\nconst resize = () => {\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n    bounds = canvas.getBoundingClientRect();\r\n    requestAnimationFrame(draw);\r\n};\r\nwindow.addEventListener('load', resize);\r\nwindow.addEventListener('resize', resize);\r\nlet mouseHeld = false;\r\nlet cameraX = -window.innerWidth / 2;\r\nlet cameraY = -window.innerHeight / 2;\r\nlet oldMouseX = 0;\r\nlet oldMouseY = 0;\r\nconst rects = [\r\n    {\r\n        x: 0,\r\n        y: 0,\r\n        width: 50,\r\n        height: 50\r\n    }\r\n];\r\nconst debug = (...text) => {\r\n    debugElement.innerText = text.join('');\r\n};\r\nconst draw = () => {\r\n    debug('x: ', cameraX, ', y: ', cameraY);\r\n    context.clearRect(0, 0, bounds.width, bounds.height);\r\n    drawBackgroundGraph();\r\n    context.fillStyle = '#FF0000';\r\n    rects.forEach((rect) => context.fillRect(rect.x - cameraX, rect.y - cameraY, rect.width, rect.height));\r\n};\r\nfunction drawBackgroundGraph() {\r\n    context.fillStyle = 'rgba(220, 220, 220, 0.2)';\r\n    for (let startX = roundUp(cameraX); startX < bounds.width + roundUp(cameraX); startX += 100) {\r\n        context.fillRect(startX - cameraX, 0, 1, bounds.height);\r\n    }\r\n    for (let startY = roundUp(cameraY); startY < bounds.width + roundUp(cameraY); startY += 100) {\r\n        context.fillRect(0, startY - cameraY, bounds.width, 1);\r\n    }\r\n    context.fillStyle = 'rgba(200, 200, 200, 0.6)';\r\n    context.fillRect(-cameraX, 0, 3, bounds.height);\r\n    context.fillRect(0, -cameraY, bounds.width, 3);\r\n}\r\nconst roundUp = (x, threshold = 100) => {\r\n    if (x >= 0) {\r\n        return x % threshold === 0 ? x : x + threshold - (x % threshold);\r\n    }\r\n    return x % threshold === 0 ? x : x - (x % threshold);\r\n};\r\ncanvas.addEventListener('mousedown', () => (mouseHeld = true));\r\ncanvas.addEventListener('mouseup', () => (mouseHeld = false));\r\ncanvas.addEventListener('focusout', () => (mouseHeld = false));\r\nwindow.addEventListener('mousemove', (event) => {\r\n    const mouseX = event.clientX - bounds.left;\r\n    const mouseY = event.clientY - bounds.top;\r\n    if (mouseHeld) {\r\n        cameraX += oldMouseX - mouseX;\r\n        cameraY += oldMouseY - mouseY;\r\n        requestAnimationFrame(draw);\r\n    }\r\n    oldMouseX = mouseX;\r\n    oldMouseY = mouseY;\r\n});\r\nrequestAnimationFrame(draw);\r\n"],"names":[],"sourceRoot":""}